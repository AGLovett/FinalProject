import pygame
import random

pygame.init()

#game window

WIDTH, HEIGHT = 800, 400
WIN = pygame.display.set_mode((WIDTH,HEIGHT))
pygame.display.set_caption("Jump Kitty Jump")

#Colors definded earlier
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Player settings
PLAYER_WIDTH, PLAYER_HEIGHT = 40, 60
PLAYER_JUMP = -15
GRAVITY = 1

# Obstacle settings
OBSTACLE_WIDTH, OBSTACLE_HEIGHT = 30, 50
OBSTACLE_SPEED = 7

class Player:
    def __init__(self):
        self.rect = pygame.Rect(100, HEIGHT - PLAYER_HEIGHT - 10, PLAYER_WIDTH, PLAYER_HEIGHT)
        self.velocity = 0
        self.on_ground = True

    def jump(self):
        if self.on_ground:
            self.velocity = PLAYER_JUMP
            self.on_ground = False




#in main clock, obstacles, collision, counting score, 
#removing "dead obstecles", drawing shapes to be replaced later, and displaying s
def main():
    clock = pygame.time.clock()
    fps = 60

    player = player()
    obstacles = []
    spawn_timer = 0
    score = 0

    running = True
    while running:
        clock.tick(fps)
        spawn_timer += 1

     # Events (quitting and jumping)  
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                player.jump()

    # obstacles 
    if spawn_timer >= 60:
        obstacles.append(Obstacles())
        spawn_timer = 0

    #updated game object
    player.update()
    for obstacle in obstacles:
        obstacle.update()

    #Collision
    for obstacle in obstacles:
        if player.rect.colliderect(obstacle.rect):
            running = False

    #Score keeping!
    for obstacle in obstacles:
        if not obstacle.passed and obstacle.rect.right < player.rect.left:
            score += 1
            obstacle.passed = True

    #removing inactive obstacles
    obstacles = [obs for obs in obstacles if obs.active ]

    #place holder background
    WIN.fill(WHITE)
    pygame.draw.rect(WIN, BLACK, (0, HEIGHT - 10, WIDTH, 10))  # Ground

    # placeholder player 
    pygame.draw.rect(WIN, RED, player.rect)

    #placeholder obstacles
    for obstacle in obstacles:
        pygame.draw.rect(WIN, BLACK, obstacle.rect)

    # displaying score
    font = pygame.font.Font(None, 36)
    text = font.render(f"Obstacles Hopped: {score}", True, BLACK)
    WIN.blit(text, (10,10))

    pygame.display.update()

    pygame.quit()

    if __name__ == "__main__":
        main()



        
        

